useth <tupiheader.th>

i8 pularLinha "\n\0"
i8 msg1 'myInt is ', 0
i8 msgLoop "myInt in loop is \0"
i8 msg6 "myInts is %d %d %d %d %d\n\0"
i8 luaName "lua\0" 
i8 args "\0"
i64 myInt 120
myStruct myStructTest {8, 8, 16, 16}
Unginha myStructUnginha {8, 8, 16, 16}
CUnginha myStructCUnginha {8, 8, 8, 16}

struct Unginha
{
	i8 myByte1 ?
	i64 myLong1 ?
	i8 myByte2 ?
	i64 myLong2 ?
}

cstruct CUnginha
{
	i8 myByte1 ?
	i64 myLong1 ?
	i8 myByte2 ?
	i64 myLong2 ?
}

typedef i32 int32_1
typedef dword int32_2

fn main(i32 argc, iptr argv) 
{
	byte myByteByte = 2;
	int32_1 unini = 3;
	i64 myLongVar1 = 10;
	i8 myShortVar1 = 11;
	i8 myShortVar2 = 12;
	i64 myLongVar2 = 13;
	i8 myShortVar3 = 14;
	i64 myLongVar3 = 13;
	i64 myLongLoop = 120;
	myStruct myStructVar;
	
	$createProcess(&luaName,&args);
	consoleWriteInt(myStructCUnginha.myLong1)
	consoleWriteStr(&pularLinha)
	loop
	{
		consoleWriteStr(&msgLoop)
		consoleWriteInt(myLongLoop)
		myLongLoop-=10;
		consoleWriteStr(&pularLinha)
		loop
		{
			consoleWriteStr(&msgLoop)
			consoleWriteInt(myLongLoop)
			myLongLoop-=10;
			consoleWriteStr(&pularLinha)
			break;
		}
		break;
	}
	loop
	{
		consoleWriteStr(&msgLoop)
		consoleWriteInt(myLongLoop)
		myLongLoop-=10;
		consoleWriteStr(&pularLinha)
		break;
	}	
	return 0
}

fn print_i64(i64 integer)
{
	consoleWriteStr(&msg1)
	consoleWriteInt(integer)
	consoleWriteStr(&pularLinha)
	return
}